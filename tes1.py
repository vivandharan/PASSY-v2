
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage


OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"Y:\Projects\PASSY\build\assets\frame0")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

from tkinter import *
from cryptography.fernet import Fernet
import mysql.connector
from tkinter import messagebox

# Create a MySQL connection
conn = mysql.connector.connect(
    host="127.0.0.1",
    user="root",
    password="Qwerty772",
    database="PASSY"
)
cursor = conn.cursor()

def generate_key():
    """Generates a key and save it into a file
    """
    key = Fernet.generate_key()
    with open("secret.key", "wb") as key_file:
        key_file.write(key)
generate_key()

#Loading Key for Encryption
def load_key():
    return open("secret.key", "rb").read()
load_key()
Key = load_key()
cipher_suite = Fernet(Key)

# Create a MySQL table
cursor.execute("""CREATE TABLE IF NOT EXISTS manager (
                       id INT AUTO_INCREMENT PRIMARY KEY,
                       app_name VARCHAR(255),
                       url VARCHAR(255),
                       email_id VARCHAR(255),
                       password VARCHAR(255)
                        )
""")

# Commit changes
conn.commit()

# Encryption function
def encrypt_password(password):
    return cipher_suite.encrypt(password.encode())

# Decryption function
def decrypt_password(encrypted_password):
    try:
        return cipher_suite.decrypt(encrypted_password).decode()
    except Exception as e:
        print(f"Error decrypting password: {e}")
        return "."



def submit():
    # Insert into the MySQL table
    if app_name.get() and url.get() and email_id.get() and password.get():
        encrypted_password = encrypt_password(password.get())
        insert_query = "INSERT INTO manager (app_name, url, email_id, password) VALUES (%s, %s, %s, %s)"
        data = (app_name.get(), url.get(), email_id.get(), encrypted_password)
        cursor.execute(insert_query, data)
        conn.commit()
        # Message box
        messagebox.showinfo("Info","Record Added in PASSY!")
        query()

        # After data entry, clear the text boxes
        app_name.delete(0, END)
        url.delete(0, END)
        email_id.delete(0, END)
        password.delete(0, END)
    else:
        messagebox.showinfo("Alert","Please fill all details!")

# Create a query function
def query():
    query_btn.configure(text="Hide", command=hide)
    # Query the MySQL table
    cursor.execute("SELECT * FROM manager")
    records = cursor.fetchall()
    p_records = ""
    for record in records:
        decrypted_password = decrypt_password(record[4])
        p_records += f"{record[0]} {record[1]} {record[2]} {record[3]} {decrypted_password}\n"
    query_label['text'] = p_records


# Create a function to delete a record
def delete():
    t = delete_id.get()
    if t:
        delete_query = "DELETE FROM manager WHERE app_name = %s"
        data = (t,)
        cursor.execute(delete_query, data)
        conn.commit()
        delete_id.delete(0, END)
        messagebox.showinfo("Alert","Record {t} Successfully Deleted..")
        query()
    else:
        messagebox.showinfo("Alert","Please enter APP NAME to delete!")

def update():
    t = update_id.get()
    if t:
        global edit
        edit = Tk()
        edit.title("Update Record")
        edit.geometry("500x400")
        edit.minsize(450, 300)
        edit.maxsize(450, 300)

        # Global variables
        global app_name_edit, url_edit, email_id_edit, password_edit

        # Create text boxes
        app_name_edit = Entry(edit, width=30)
        app_name_edit.grid(row=0, column=1, padx=40)
        url_edit = Entry(edit, width=30)
        url_edit.grid(row=1, column=1, padx=40)
        email_id_edit = Entry(edit, width=30)
        email_id_edit.grid(row=2, column=1, padx=40)
        password_edit = Entry(edit, width=30)
        password_edit.grid(row=3, column=1, padx=40)

        # Create text box labels
        app_name_label_edit = Label(edit, text="Application Name:")
        app_name_label_edit.grid(row=0, column=0)
        url_label_edit = Label(edit, text="URL:")
        url_label_edit.grid(row=1, column=0)
        email_id_label_edit = Label(edit, text="Email Id:")
        email_id_label_edit.grid(row=2, column=0)
        password_label_edit = Label(edit, text="Password:")
        password_label_edit.grid(row=3, column=0)

        # Create save button
        submit_btn_edit = Button(edit, text="Save Record", command=change)
        submit_btn_edit.grid(row=4, column=0, columnspan=2, pady=5, padx=15, ipadx=135)

        # Query the MySQL table
        select_query = "SELECT * FROM manager WHERE app_name = %s"
        data = (t,)
        cursor.execute(select_query, data)
        record = cursor.fetchone()
        app_name_edit.insert(0, record[1])
        url_edit.insert(0, record[2])
        email_id_edit.insert(0, record[3])
        decrypted_password = decrypt_password(record[4])
        password_edit.insert(0, decrypted_password)

# Create a function to save updated records
def change():
    if app_name_edit.get() and url_edit.get() and email_id_edit.get() and password_edit.get():
        encrypted_password = encrypt_password(password.get())
        update_query = "UPDATE manager SET app_name = %s, url = %s, email_id = %s, password = %s WHERE app_name = %s"
        data = (app_name_edit.get(), url_edit.get(), email_id_edit.get(), encrypted_password, update_id.get())
        cursor.execute(update_query, data)
        conn.commit()
        messagebox.showinfo("Info", "Record Updated in Database!")
        update_id.delete(0, END)
        edit.destroy()
    else:
        messagebox.showinfo("Alert", "Please fill all details!")

# Create a function to hide records
def hide():
    query_label['text'] = ""
    query_btn.configure(text="Show Records", command=query)


#GUI
window = Tk()

window.geometry("612x431")
window.configure(bg = "#0C0C0C")


canvas = Canvas(
    window,
    bg = "#0C0C0C",
    height = 431,
    width = 612,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
entry_image_1 = PhotoImage(
    file=relative_to_assets("entry_1.png"))
entry_bg_1 = canvas.create_image(
    172.0,
    130.0,
    image=entry_image_1
)
app_name = Entry(
    bd=0,
    bg="#D9D9D9",
    fg="#000716",
    highlightthickness=0
)
app_name.place(
    x=96.0,
    y=118.0,
    width=152.0,
    height=22.0
)

canvas.create_text(
    49.0,
    95.0,
    anchor="nw",
    text="Application Name",
    fill="#FFFFFF",
    font=("Molengo Regular", 14 * -1)
)

entry_image_2 = PhotoImage(
    file=relative_to_assets("entry_2.png"))
entry_bg_2 = canvas.create_image(
    442.0,
    130.0,
    image=entry_image_2
)
url = Entry(
    bd=0,
    bg="#D9D9D9",
    fg="#000716",
    highlightthickness=0
)
url.place(
    x=366.0,
    y=118.0,
    width=152.0,
    height=22.0
)

canvas.create_text(
    301.0,
    91.0,
    anchor="nw",
    text="Email ID/Username",
    fill="#D9D9D9",
    font=("Molengo Regular", 14 * -1)
)

entry_image_3 = PhotoImage(
    file=relative_to_assets("entry_3.png"))
entry_bg_3 = canvas.create_image(
    442.0,
    202.5,
    image=entry_image_3
)
email_id = Entry(
    bd=0,
    bg="#D9D9D9",
    fg="#000716",
    highlightthickness=0
)
email_id.place(
    x=366.0,
    y=190.0,
    width=152.0,
    height=23.0
)

canvas.create_text(
    290.0,
    168.0,
    anchor="nw",
    text="Password",
    fill="#D9D9D9",
    font=("Molengo Regular", 14 * -1)
)

entry_image_4 = PhotoImage(
    file=relative_to_assets("entry_4.png"))
entry_bg_4 = canvas.create_image(
    474.0,
    309.0,
    image=entry_image_4
)
password = Entry(
    bd=0,
    bg="#D9D9D9",
    fg="#000716",
    highlightthickness=0
)
password.place(
    x=398.0,
    y=297.0,
    width=152.0,
    height=22.0
)

canvas.create_text(
    333.0,
    270.0,
    anchor="nw",
    text="Update Record",
    fill="#FFFFFF",
    font=("Molengo Regular", 14 * -1)
)

entry_image_5 = PhotoImage(
    file=relative_to_assets("entry_5.png"))
entry_bg_5 = canvas.create_image(
    474.0,
    381.5,
    image=entry_image_5
)
update_id = Entry(
    bd=0,
    bg="#D9D9D9",
    fg="#000716",
    highlightthickness=0
)
update_id.place(
    x=398.0,
    y=369.0,
    width=152.0,
    height=23.0
)

canvas.create_text(
    331.0,
    347.0,
    anchor="nw",
    text="Delete Record",
    fill="#D9D9D9",
    font=("Molengo Regular", 14 * -1)
)

entry_image_6 = PhotoImage(
    file=relative_to_assets("entry_6.png"))
entry_bg_6 = canvas.create_image(
    172.0,
    202.5,
    image=entry_image_6
)
delete_id = Entry(
    bd=0,
    bg="#D9D9D9",
    fg="#000716",
    highlightthickness=0
)
delete_id.place(
    x=96.0,
    y=190.0,
    width=152.0,
    height=23.0
)

canvas.create_text(
    27.0,
    168.0,
    anchor="nw",
    text="URL",
    fill="#FFFFFF",
    font=("Molengo Regular", 14 * -1)
)

query_label = Label(frame, anchor="nw", justify="left")
query_label.place(relwidth=1, relheight=1)


'''entry_image_7 = PhotoImage(
    file=relative_to_assets("entry_7.png"))
entry_bg_7 = canvas.create_image(
    167.5,
    339.5,
    image=entry_image_7
)
query_label = Text(
    bd=0,
    bg="#D9D9D9",
    fg="#000716",
    highlightthickness=0
)
query_label.place(
    x=27.0,
    y=265.0,
    width=281.0,
    height=147.0
)
'''
button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
submit_btn = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: submit,
    relief="flat"
)
submit_btn.place(
    x=306.0,
    y=230.0,
    width=58.0,
    height=20.0
)

button_image_2 = PhotoImage(
    file=relative_to_assets("button_2.png"))
query_btn = Button(
    image=button_image_2,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: query,
    relief="flat"
)
query_btn.place(
    x=235.0,
    y=230.0,
    width=67.0,
    height=20.0
)

image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    306.0,
    35.0,
    image=image_image_1
)

button_image_3 = PhotoImage(
    file=relative_to_assets("button_3.png"))
update_btn = Button(
    image=button_image_3,
    borderwidth=0,
    highlightthickness=0,
    command=lambda:update,
    relief="flat"
)
update_btn.place(
    x=455.0,
    y=270.0,
    width=49.0,
    height=18.99999237060547
)

button_image_4 = PhotoImage(
    file=relative_to_assets("button_4.png"))
delete_btn = Button(
    image=button_image_4,
    borderwidth=0,
    highlightthickness=0,
    command=lambda:delete,
    relief="flat"
)
delete_btn.place(
    x=451.0,
    y=345.0,
    width=49.0,
    height=19.0
)
window.resizable(False, False)
window.mainloop()
